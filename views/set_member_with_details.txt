CREATE OR REPLACE VIEW set_member_with_details AS
SELECT
  set_member.set_id,
  set_member.multi_set,
  set_member.note,
  set_member.reflex,
  json_build_object(
    'id', ed.id,
    'headword', ed.headword,
    'headword_ipa', ed.headword_ipa,
    'root', ed.root,
    'origin', ed.origin,
    'origin_language_id', ed.origin_language_id,
    'origin_language_name', ed.origin_language_name,
    'record_id', ed.record_id,
    'senses', ed.senses
  ) AS entry,
  ed.source,
  ed.language,
  (CASE WHEN set_member.multi_set IS FALSE THEN NULL ELSE (
    nullif(array(
      SELECT json_build_object(
        'id', set.id,
        'name', coalesce(sna.name_auto->>'txt', set.id::text)
      )
      FROM set
      JOIN set_name_auto sna ON sna.id = set.id
      WHERE set.id != set_member.set_id AND EXISTS (
        SELECT FROM set_member sm WHERE sm.set_id = set.id AND sm.entry_id = set_member.entry_id
      )
      ORDER BY sna.name_auto->>'txt', lpad(set.id::text, 10, '0')
    ), '{}')
  ) END) AS other_sets
FROM set_member
JOIN entry_with_details ed ON ed.id = set_member.entry_id
;

CREATE OR REPLACE VIEW set_member_with_details_public AS
SELECT
  set_member.set_id,
  set_member.multi_set,
  set_member.note,
  set_member.reflex,
  json_build_object(
    'id', ed.id,
    'headword', ed.headword,
    'headword_ipa', ed.headword_ipa,
    'root', ed.root,
    'origin', ed.origin,
    'origin_language_id', ed.origin_language_id,
    'origin_language_name', ed.origin_language_name,
    'record_id', ed.record_id,
    'senses', ed.senses
  ) AS entry,
  ed.source,
  ed.language,
  (CASE WHEN set_member.multi_set IS FALSE THEN NULL ELSE (
    nullif(array(
      SELECT json_build_object(
        'id', set.id,
        'name', coalesce(sna.name_auto->>'txt', set.id::text)
      )
      FROM set
      JOIN set_name_auto sna ON sna.id = set.id
      WHERE set.id != set_member.set_id AND EXISTS (
        SELECT FROM set_member sm WHERE sm.set_id = set.id AND sm.entry_id = set_member.entry_id
      )
      ORDER BY sna.name_auto->>'txt', lpad(set.id::text, 10, '0')
    ), '{}')
  ) END) AS other_sets
FROM set_member
JOIN entry_with_details_public ed ON ed.id = set_member.entry_id
;
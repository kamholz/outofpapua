CREATE OR REPLACE VIEW entry_with_details AS
SELECT
  es.id,
  es.headword,
  es.headword_ipa,
  es.root,
  es.origin,
  es.origin_language_id,
  origin_language.name AS origin_language_name,
  es.record_id,
  es.senses,
  json_build_object(
    'id', source.id,
    'reference', source.reference,
    'editable', source.editable,
    'ipa_conversion_rule', source.ipa_conversion_rule
  ) AS source,
  json_build_object(
    'id', language.id,
    'name', language.name,
    'location', language.location,
    'is_proto', protolanguage.id IS NOT NULL,
    'ancestor_id', language.ancestor_id,
    'ancestor_name', ancestor_language.name
  ) AS language
FROM entry_with_senses es
JOIN source ON source.id = es.source_id
JOIN language ON language.id = source.language_id
LEFT JOIN protolanguage ON protolanguage.id = language.id
LEFT JOIN language origin_language ON origin_language.id = es.origin_language_id
LEFT JOIN language ancestor_language ON ancestor_language.id = language.ancestor_id
;

CREATE OR REPLACE FUNCTION entry_with_details(view text)
  RETURNS TABLE(id integer, headword text, headword_ipa text, root text, note text, origin entry_origin, origin_language_id integer, origin_language_name text, record_id integer, senses json, source json, language json)
  LANGUAGE sql
  STABLE
  PARALLEL SAFE
AS $$
  SELECT
    es.id,
    es.headword,
    es.headword_ipa,
    es.root,
    es.origin,
    es.origin_language_id,
    origin_language.name AS origin_language_name,
    es.record_id,
    es.senses,
    json_build_object(
      'id', source.id,
      'reference', source.reference,
      'editable', source.editable,
      'ipa_conversion_rule', source.ipa_conversion_rule
    ) AS source,
    json_build_object(
      'id', language.id,
      'name', language.name,
      'location', language.location,
      'is_proto', protolanguage.id IS NOT NULL,
      'ancestor_id', language.ancestor_id,
      'ancestor_name', ancestor_language.name
    ) AS language
  FROM entry_with_senses es
  JOIN source ON source.id = es.source_id
  JOIN language ON language.id = source.language_id
  LEFT JOIN protolanguage ON protolanguage.id = language.id
  LEFT JOIN language origin_language ON origin_language.id = es.origin_language_id
  LEFT JOIN language ancestor_language ON ancestor_language.id = language.ancestor_id
  WHERE source.language_id IN (SELECT language_list.language_id from language_list WHERE language_list.view = view)
$$;

CREATE OR REPLACE VIEW entry_with_details_public AS
SELECT
  es.id,
  es.headword,
  es.headword_ipa,
  es.root,
  es.origin,
  es.origin_language_id,
  origin_language.name AS origin_language_name,
  es.record_id,
  es.senses,
  json_build_object(
    'id', source.id,
    'reference', source.reference,
    'editable', source.editable,
    'ipa_conversion_rule', source.ipa_conversion_rule
  ) AS source,
  json_build_object(
    'id', language.id,
    'name', language.name,
    'location', language.location,
    'is_proto', protolanguage.id IS NOT NULL,
    'ancestor_id', language.ancestor_id,
    'ancestor_name', ancestor_language.name
  ) AS language
FROM entry_with_senses es
JOIN source ON source.id = es.source_id
JOIN language ON language.id = source.language_id
LEFT JOIN protolanguage ON protolanguage.id = language.id
LEFT JOIN language origin_language ON origin_language.id = es.origin_language_id
LEFT JOIN language ancestor_language ON ancestor_language.id = language.ancestor_id
WHERE source.public
;